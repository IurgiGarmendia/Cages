using Cages.App_Code.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

//https://docs.devexpress.com/WindowsForms/3265/controls-and-libraries/data-grid/examples/data-binding/how-to-bind-a-gridcontrol-to-a-database-in-server-mode
//https://www.youtube.com/watch?v=fcmCC66B08o



namespace Cages
{
    public partial class Parent : DevExpress.XtraBars.Ribbon.RibbonForm
    {

        public Parent()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource2.GetQueryable += entityInstantFeedbackSource2_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource2.DismissQueryable += entityInstantFeedbackSource2_DismissQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource3.GetQueryable += entityInstantFeedbackSource3_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource3.DismissQueryable += entityInstantFeedbackSource3_DismissQueryable;
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("Form1");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                Form1 newMDIChild = new Form1();
                //Set the Parent Form of the Child window.
                newMDIChild.MdiParent = this;
                //Display the new form.
               newMDIChild.Show();
                newMDIChild.Focus();
            }
        }

        private bool isOpenChild(string formName)
        {
            bool IsOpen = false;
            foreach (Form f in Application.OpenForms)
            {
                if (f.Text == formName)
                {
                    IsOpen = true;
                    f.Focus();
                    f.WindowState = FormWindowState.Maximized;
                    break;
                }
            }

            return IsOpen;
        }

        private void barButtonItem2_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            using (var db = new Model1())
            {
                // Create and save a new Blog
                //Console.Write("Enter a name for a new Blog: ");
                //var name = Console.ReadLine();

                //var blog = new Blog { Name = name };
                //db.Blogs.Add(blog);
                //db.SaveChanges();

                // Display all Blogs from the database
                //var query = from b in db.DBEnvios
                //            orderby b.IDENVIO
                //            select b;

                ////Console.WriteLine("All blogs in the database:");
                //foreach (var item in query)
                //{
                //    MessageBox.Show(item.IDENVIO + item.NOMBRE + item.USUARIO);
                //}


               
                var query1 = from b in db.DBMOVSPZ
                            orderby b.CODIGO
                            select b;

                //Console.WriteLine("All blogs in the database:");
                foreach (var item in query1.Take(5))
                {
                    MessageBox.Show("DBMOVSPZ" + item.CODIGO + item.PEDIDO + item.O_PED);
                }


                //Console.WriteLine("Press any key to exit...");
                //Console.ReadKey();
            }
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Instantiate a new DataContext
            Cages.App_Code.Model.Model1 dataContext = new Cages.App_Code.Model.Model1();
            // Assign a queryable source to the EntityInstantFeedbackSource
            e.QueryableSource = dataContext.DBMOVSPZ;
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Dispose of the DataContext
            ((Cages.App_Code.Model.Model1)e.Tag).Dispose();
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource2_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Instantiate a new DataContext
            Cages.App_Code.Model.Model1 dataContext = new Cages.App_Code.Model.Model1();
            // Assign a queryable source to the EntityInstantFeedbackSource
            e.QueryableSource = dataContext.DBMOVSPZ;
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource2_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Dispose of the DataContext
            ((Cages.App_Code.Model.Model1)e.Tag).Dispose();
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource3_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Instantiate a new DataContext
            Cages.App_Code.Model.Model1 dataContext = new Cages.App_Code.Model.Model1();
            // Assign a queryable source to the EntityInstantFeedbackSource
            e.QueryableSource = dataContext.DBMOVSPZ;
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource3_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Dispose of the DataContext
            ((Cages.App_Code.Model.Model1)e.Tag).Dispose();
        }

        private void barButtonItem3_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("Pztrabajo");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                FrmPzTrabajo newMDIChildTrabajo = new FrmPzTrabajo();
                //Set the Parent Form of the Child window.
                newMDIChildTrabajo.MdiParent = this;
                //Display the new form.
                newMDIChildTrabajo.Show();
                newMDIChildTrabajo.Focus();
            }
        }

        private void barButtonItem4_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("Cage");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                Cage newMDIChildTrabajo = new Cage();
                //Set the Parent Form of the Child window.
                newMDIChildTrabajo.MdiParent = this;
                //Display the new form.
                newMDIChildTrabajo.Show();
                newMDIChildTrabajo.Focus();
            }

        }

        private void barButtonItem5_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("FrmNotGlobalDB");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                FrmNotGlobalDB newMDIChilNotGlobal = new FrmNotGlobalDB();
                //Set the Parent Form of the Child window.
                newMDIChilNotGlobal.MdiParent = this;
                //Display the new form.
                newMDIChilNotGlobal.Show();
                newMDIChilNotGlobal.Focus();
            }
        }

        private void barButtonItem6_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("DbLotData");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                DbLotData newMDIChilDbLotData = new DbLotData();
                //Set the Parent Form of the Child window.
                newMDIChilDbLotData.MdiParent = this;
                //Display the new form.
                newMDIChilDbLotData.Show();
                newMDIChilDbLotData.Focus();
            }
        }

        private void barButtonItem7_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("FrmGlobalDB");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                FrmGlobalDB newMDIChilDbglobal = new FrmGlobalDB();
                //Set the Parent Form of the Child window.
                newMDIChilDbglobal.MdiParent = this;
                //Display the new form.
                newMDIChilDbglobal.Show();
                newMDIChilDbglobal.Focus();
            }
        }

        private void barButtonItem8_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bool isOpen = isOpenChild("Inner");
            //gridControl1.Visible = false;

            if (!isOpen)
            {
                Inner newMDIChilDbglobal = new Inner();
                //Set the Parent Form of the Child window.
                newMDIChilDbglobal.MdiParent = this;
                //Display the new form.
                newMDIChilDbglobal.Show();
                newMDIChilDbglobal.Focus();
            }
        }
    }
}
