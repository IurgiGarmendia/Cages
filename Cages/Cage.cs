using Cages.App_Code.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using EntityState = System.Data.Entity.EntityState;

namespace Cages
{
    public partial class Cage : Form
    {
        Cages.App_Code.Model.Model1 _dataContext;
        Cages.App_Code.Model.Model1 _dbContext;
        public Cage()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            _dbContext = new Cages.App_Code.Model.Model1();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            _dbContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = _dbContext.DBCAGE.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
    //        Cages.App_Code.Model.Model1 dbContext = new Cages.App_Code.Model.Model1();
    //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
    //        dbContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
    //        {
    //// Bind data to control when loading complete
    //gridControl1.DataSource = dbContext.DBCAGE.Local.ToBindingList();
    //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Instantiate a new DataContext
            _dataContext = new Cages.App_Code.Model.Model1();
            // Assign a queryable source to the EntityInstantFeedbackSource
            e.QueryableSource = _dataContext.DBCAGE;
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = _dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            //// Dispose of the DataContext
            //((Cages.App_Code.Model.Model1)e.Tag).Dispose();
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            KAJA kaxa = new KAJA();
            //kaxa.IDCAGE = 102;
            kaxa.AREA = "a";
            kaxa.ESTANTE = "e";

            //_dataContext.DBCAGE.Add(kaxa);
            //_dataContext.SaveChanges();

            //gridView1.AddNewRow(kaxa);

            _dbContext.DBCAGE.Add(kaxa);
            _dbContext.SaveChanges();


            //gridControl1.RefreshDataSource();

            //gridView1.RefreshData();
            //_dbContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    gridControl1.DataSource = _dbContext.DBCAGE.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());

            //_dbContext.DBCAGE.Load();
            //gridControl1.DataSource = _dbContext.DBCAGE.Local.ToBindingList();
            //gridView1.RefreshData();
            //gridControl1.RefreshDataSource();

            //_dbContext.Entry(kaxa).Reload();
            //gridControl1.RefreshDataSource();
            //gridView1.RefreshData();



        }

        private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            dataRefresh();

            _dbContext.SaveChanges();
            //loadDataGrid();
            //_dbContext.DBCAGE.Load();
            //gridControl1.DataSource = _dbContext.DBCAGE.Local.ToBindingList();
            //gridView1.RefreshData();
            //gridControl1.RefreshDataSource();
            dataRefresh();
            
            //recreateDB();
            //gridControl1.RefreshDataSource();
            //gridView1.RefreshData();


        }

        private void recreateDB()
        {
           Model1 dbContext = new Cages.App_Code.Model.Model1();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.DBCAGE.Load();
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.DBCAGE.Local.ToBindingList();
            
        }

        private void dataRefresh()
        {
            var context = ((IObjectContextAdapter)_dbContext).ObjectContext;
            var refreshableObjects = (from entry in context.ObjectStateManager.GetObjectStateEntries(
                                                       EntityState.Added
                                                       | EntityState.Deleted
                                                       | EntityState.Modified
                                                       | EntityState.Unchanged)
                                      where entry.EntityKey != null
                                      select entry.Entity).ToList();

            context.Refresh(RefreshMode.StoreWins, refreshableObjects);

            //var refreshableObjects = _dbContext.ChangeTracker.Entries().Select(c => c.Entity).ToList();
            //context.Refresh(RefreshMode.StoreWins, refreshableObjects);
        }

        private void loadDataGrid()
        {
            _dbContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = _dbContext.DBCAGE.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }
    }
}
