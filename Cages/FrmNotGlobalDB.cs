using Cages.App_Code.Model;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using EntityState = System.Data.Entity.EntityState;
using System.Data.Entity.Core.Objects;

namespace Cages
{
    public partial class FrmNotGlobalDB : Form
    {
        //Cages.App_Code.Model.Model1 _dbContext;
        public FrmNotGlobalDB()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            this.pLinqInstantFeedbackSource1.GetEnumerable += pLinqInstantFeedbackSource1_GetEnumerable;
            // This line of code is generated by Data Source Configuration Wizard
            this.pLinqInstantFeedbackSource1.DismissEnumerable += pLinqInstantFeedbackSource1_DismissEnumerable;
            // This line of code is generated by Data Source Configuration Wizard
            //Instantiate a new DBContext
            //_dbContext = new Cages.App_Code.Model.Model1();
            //// Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //_dbContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
            //{
            //    // Bind data to control when loading complete
            //    gridControl1.DataSource = _dbContext.DBCAGE.Local.ToBindingList();
            //}, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            //        Cages.App_Code.Model.Model1 dbContext = new Cages.App_Code.Model.Model1();
            //        // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            //        dbContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
            //        {
            //// Bind data to control when loading complete
            //gridControl1.DataSource = dbContext.DBCAGE.Local.ToBindingList();
            //        }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            refreshDatalist();
        }

        // This event is generated by Data Source Configuration Wizard
        void pLinqInstantFeedbackSource1_GetEnumerable(object sender, DevExpress.Data.PLinq.GetEnumerableEventArgs e)
        {

            // Instantiate a new DataContext
            Cages.App_Code.Model.Model1 dataContext = new Cages.App_Code.Model.Model1();
            // Assign a queryable source to the PLinqInstantFeedbackSource
            e.Source = dataContext.DBCAGE;
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissEnumerable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void pLinqInstantFeedbackSource1_DismissEnumerable(object sender, DevExpress.Data.PLinq.GetEnumerableEventArgs e)
        {

            // Dispose of the DataContext
            ((Cages.App_Code.Model.Model1)e.Tag).Dispose();
        }

        private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            using(Model1 dataContext = new Model1())
            {
                //KAJA kaxa = new KAJA();
                ////kaxa.IDCAGE = 102;
                //kaxa.AREA = "a";
                //kaxa.ESTANTE = "eglob";
                //dataContext.DBCAGE.Add(kaxa);


                int idcage = Convert.ToInt32(gridView1.GetFocusedRowCellValue("IDCAGE").ToString());
                string area = gridView1.GetFocusedRowCellValue("AREA").ToString();

                var result = dataContext.DBCAGE.SingleOrDefault(b => b.IDCAGE ==  idcage);
                if (result != null)
                {
                    try
                    {
                        result.AREA = area;
                        dataContext.SaveChanges();
                    }
                    catch(DbUpdateException ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                    
                }


                //dataContext.SaveChanges();
                //gridControl1.DataSource=dataContext.DBCAGE.ToList();

                //refreshDatalist(dataContext);
                //gridView1.RefreshData();
                
            }
            //dataRefresh();
            refreshDatalist();
        }

        private void refreshDatalist()
        {
            Model1 dataContext = new Model1();
            dataContext.DBCAGE.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dataContext.DBCAGE.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Instantiate a new DataContext
            Cages.App_Code.Model.Model1 dataContext = new Cages.App_Code.Model.Model1();
            // Assign a queryable source to the EntityInstantFeedbackSource
            e.QueryableSource = dataContext.DBCAGE;
            // Assign the DataContext to the Tag property,
            // to dispose of it in the DismissQueryable event handler
            e.Tag = dataContext;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Dispose of the DataContext
            ((Cages.App_Code.Model.Model1)e.Tag).Dispose();
        }


        private void dataRefresh()
        {
            //var context = ((IObjectContextAdapter)_dbContext).ObjectContext;
            ////var refreshableObjects = (from entry in context.ObjectStateManager.GetObjectStateEntries(
            ////                                           EntityState.Added
            ////                                           | EntityState.Deleted
            ////                                           | EntityState.Modified
            ////                                           | EntityState.Unchanged)
            ////                          where entry.EntityKey != null
            ////                          select entry.Entity).ToList();

            ////context.Refresh(RefreshMode.StoreWins, refreshableObjects);

            //var refreshableObjects = _dbContext.ChangeTracker.Entries().Select(c => c.Entity).ToList();
            //context.Refresh(RefreshMode.StoreWins, refreshableObjects);
        }


    }
}
